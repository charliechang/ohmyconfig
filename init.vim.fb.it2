set background=light
highlight LineNr ctermfg=grey
set backspace=indent,eol,start
set rnu
set nu
syntax on
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set wildmenu
set wildmode=list:longest,full

call plug#begin()
    Plug 'scrooloose/nerdtree'
    Plug 'Raimondi/delimitMate'
    Plug 'Yggdroot/indentLine'
    Plug 'vim-airline/vim-airline'
    Plug 'bling/vim-bufferline'
    Plug 'mileszs/ack.vim'
    Plug 'christoomey/vim-tmux-navigator'
    Plug 'hhvm/vim-hack'
    Plug 'dense-analysis/ale'
call plug#end()

set cursorline
highlight  CursorLine ctermbg=None ctermfg=None
autocmd InsertEnter * highlight  CursorLine ctermbg=DarkBlue ctermfg=LightGreen
autocmd InsertLeave * highlight  CursorLine ctermbg=None ctermfg=None

set t_Co=256
set hlsearch
set incsearch
set autoindent
set ic
set foldmethod=indent
set foldlevel=1

" autocmd VimEnter * NERDTree
nnoremap <C-n> :NERDTreeToggle<CR>
nnoremap cdc :cd %:p:h<CR>:pwd<CR>
noremap gs :vimgrep /<C-r><C-w>/gj ./**<CR>
set laststatus=2
" enable tabline
 let g:airline#extensions#tabline#enabled = 1
" " set left separator
 let g:airline#extensions#tabline#left_sep = ' '
" " set left separator which are not editting
 let g:airline#extensions#tabline#left_alt_sep = '|'
" " show buffer number
 let g:airline#extensions#tabline#buffer_nr_show = 1
set hidden
nnoremap bn :bn<CR>
nnoremap bp :bp<CR>
nnoremap bd :bd<CR>
nnoremap bp :bp<CR>
nnoremap b1 :b1<CR>
nnoremap b2 :b2<CR>
nnoremap b3 :b3<CR>
nnoremap b4 :b4<CR>
nnoremap b5 :b5<CR>
nnoremap b6 :b6<CR>
nnoremap b7 :b7<CR>
nnoremap b8 :b8<CR>
nnoremap b9 :b9<CR>
nnoremap ls :ls<CR>

set switchbuf=useopen
set autoread

" ##### MYC #####
set rtp+=/usr/local/share/myc/vim
nmap <leader>t :MYC<CR>

" ##### ALE #####
nnoremap <silent> K :ALEHover<CR>
noremap <silent> gd :ALEGoToDefinition<CR>
noremap <silent> gr :ALEFindReferences<CR>

" ##### Hack #####
if $TW_JOB_NAME == 'www' 
    " Automatic completion
    let g:ale_completion_enabled = 1
    set omnifunc=ale#completion#OmniFunc
    " Include the linter name (e.g. 'hack' or 'hhast'), code, and message in errors
    let g:ale_echo_msg_format = '[%linter%]% [code]% %s'
    " Enable HHAST - this has security implications (see below)
    let g:ale_linters = { 'hack': ['hack', 'hhast'] }

    " show type on hover in a floating bubble
    if v:version >= 801
      set balloonevalterm
      let g:ale_set_balloons = 1
      let balloondelay = 250
    endif
endif

" ##### Ack #####
if $TW_JOB_NAME == 'sigma'
    let g:ackprg = "sibgs -s"
elseif $TW_JOB_NAME == 'www' 
    let g:ackprg = "tbgs -s"
else
    echom 'g:ackprg is not set properly'
endif

" ##### 81 #####
set colorcolumn=81

" ##### Clipboard #####
set clipboard+=unnamed,unnamedplus
let g:clipboard={
\    'name': 'ncat',
\    'copy': { '+': 'bash -c /tmp/ohmyconfig/mypbcopy.sh', '*': 'bash -c /tmp/ohmyconfig/mypbcopy.sh' },
\    'paste': { '+': 'tmux show-buffer', '*': 'tmux show-buffer'},
\ }

